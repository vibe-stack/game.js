// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// IPC interface types for Electron
// When adding a new context interface, add it to the exposeContexts() function in preload.ts

interface GameProject {
  name: string;
  path: string;
  lastModified: Date;
  isRunning?: boolean;
}

interface DevServerInfo {
  port?: number;
  url?: string;
}

interface ThemeModeContext {
  toggle: () => void;
  dark: () => void;
  light: () => void;
  system: () => void;
}

interface ElectronWindow {
  close: () => void;
  minimize: () => void;
  maximize: () => void;
  isMaximized: () => Promise<boolean>;
}

interface ProjectAPI {
  loadProjects: () => Promise<GameProject[]>;
  createProject: (projectName: string) => Promise<GameProject>;
  installPackages: (projectName: string) => Promise<void>;
  startDevServer: (projectName: string) => Promise<DevServerInfo>;
  stopDevServer: (projectName: string) => Promise<void>;
  openProjectFolder: (projectPath: string) => Promise<void>;
  isDevServerRunning: (projectName: string) => Promise<boolean>;
  getServerInfo: (projectName: string) => Promise<DevServerInfo | undefined>;
  connectToEditor: (projectName: string) => Promise<void>;
  sendPropertyUpdate: (projectName: string, property: string, value: unknown, temporary?: boolean) => Promise<void>;
  getSceneInfo: (projectName: string, scenePath: string) => Promise<unknown>;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  projectAPI: ProjectAPI;
}
